namespace Game.Base.Packets
{
    using Game.Server.Achievement;
    using Game.Server.GameObjects;
    using Game.Server.GameUtils;
    using Game.Server.Packets;
    using Game.Server.Quests;
    using Game.Server.Rooms;
    using Game.Server.SceneMarryRooms;
    using SqlDataProvider.Data;
    using System;
    using System.Collections.Generic;
    using Game.Server.Buffer;

    public interface IPacketLib
    {
        GSPacketIn SendAASControl(bool result, bool IsAASInfo, bool IsMinor);
        GSPacketIn SendAASInfoSet(bool result);
        GSPacketIn SendAASState(bool result);
        GSPacketIn SendActivityList(int ID);
        GSPacketIn SendAchievementDataInfo(List<AchievementData> data);
        GSPacketIn SendAchievementDatas(GamePlayer player, BaseAchievement[] infos);
        GSPacketIn SendAchievementSuccess(AchievementData d);
        GSPacketIn SendAddFriend(PlayerInfo user, int relation, bool state);
        GSPacketIn SendAuctionRefresh(AuctionInfo info, int auctionID, bool isExist, SqlDataProvider.Data.ItemInfo item);
        GSPacketIn SendAvatarCollect(PlayerAvatarCollection avtCollect);
        GSPacketIn SendBattleGoundOpen(int ID);
        GSPacketIn SendBattleGoundOver(int ID);
        GSPacketIn SendBufferList(GamePlayer player, List<AbstractBuffer> infos);
        GSPacketIn sendBuyBadge(int BadgeID, int ValidDate, bool result, string BadgeBuyTime, int playerid);
        GSPacketIn SendCampBattleOpenClose(int ID, bool result);
        void SendCatchBeastOpen(int playerID, bool isOpen);
        GSPacketIn sendConsortiaApplyStatusOut(bool state, bool result, int playerid);
        GSPacketIn SendConsortiaBattleOpenClose(int ID, bool result);
        GSPacketIn SendConsortiaCreate(string name1, bool result, int id, string name2, string msg, int dutyLevel, string DutyName, int dutyRight, int playerid);
        GSPacketIn sendConsortiaChangeChairman(string nick, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaEquipConstrol(bool result, List<int> Riches, int playerid);
        GSPacketIn SendConsortiaInvite(string username, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaInviteDel(int id, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaInvitePass(int id, bool result, int consortiaid, string consortianame, string msg, int playerid);
        GSPacketIn SendConsortiaLevelUp(byte type, byte level, bool result, string msg, int playerid);
        GSPacketIn SendConsortiaMail(bool result, int playerid);
        GSPacketIn SendConsortiaMemberGrade(int id, bool update, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaOut(int id, bool result, string msg, int playerid);
        GSPacketIn SendConsortiaRichesOffer(int money, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaTryIn(int id, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaTryInDel(int id, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaTryInPass(int id, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaUpdateDescription(string description, bool result, string msg, int playerid);
        GSPacketIn sendConsortiaUpdatePlacard(string description, bool result, string msg, int playerid);
        GSPacketIn SendContinuation(GamePlayer player, HotSpringRoomInfo hotSpringRoomInfo);
        GSPacketIn SendContinuation(GamePlayer player, MarryRoomInfo info);
        void SendCSMBox(int UserID);
        void SendCurrentDressModel(PlayerInfo player);
        void SendCheckCode();
        GSPacketIn SendChickenBoxOpen(int ID, int flushPrice, int[] openCardPrice, int[] eagleEyePrice);
        GSPacketIn SendDailyAward(PlayerInfo player);
        void SendDateTime();
        GSPacketIn SendDiceActiveClose(int ID);
        GSPacketIn SendDiceActiveOpen(PlayerDice Dice);
        GSPacketIn SendDiceReceiveData(PlayerDice Dice);
        GSPacketIn SendDiceReceiveResult(PlayerDice Dice);
        void SendDragonBoat(PlayerInfo info);
        GSPacketIn SendDressModelInfo(PlayerDressModel dressModel);
        void SendEdictumVersion();
        void SendEditionError(string msg);
        GSPacketIn SendEnterFarm(PlayerInfo Player, UserFarmInfo farm, UserFieldInfo[] fields);
        GSPacketIn SendEnterHotSpringRoom(GamePlayer player);
        GSPacketIn SendEquipChange(GamePlayer player, int place, int goodsID, string style);
        void SendExpBlessedData(int PlayerId);
        GSPacketIn SendFightFootballTimeOpenClose(int ID, bool result);
        GSPacketIn SendFindBackIncome(int ID);
        GSPacketIn SendFriendRemove(int FriendID);
        GSPacketIn SendFriendState(int playerID, int state, byte typeVip, int viplevel);
        GSPacketIn SendFusionPreview(GamePlayer player, Dictionary<int, double> previewItemList, bool isBind, int MinValid);
        GSPacketIn SendFusionResult(GamePlayer player, bool result);
        GSPacketIn SendGameMissionPrepare();
        GSPacketIn SendGameMissionStart();
        GSPacketIn SendGameRoomSetupChange(BaseRoom room);
        GSPacketIn SendGetBoxTime(int ID, int receiebox, bool result);
        GSPacketIn SendGetCard(PlayerInfo info, UsersCardInfo card);
        GSPacketIn SendGetPlayerCard(int playerId);
        GSPacketIn SendGetSpree(PlayerInfo player);
        GSPacketIn SendGrowthPackageOpen(int ID, int isBuy);
        GSPacketIn SendGrowthPackageUpadte(int ID, int isBuy);
        void SendGuildMemberWeekOpenClose(PyramidConfigInfo info);
        GSPacketIn SendHelperSwitchField(PlayerInfo Player, UserFarmInfo farm);
        GSPacketIn SendHotSpringUpdateTime(GamePlayer player, int expAdd);
        GSPacketIn SendIDNumberCheck(bool result);
        GSPacketIn SendKillCropField(PlayerInfo Player, UserFieldInfo field);
        GSPacketIn SendKingBlessMain(PlayerExtra Extra);
        GSPacketIn SendKingBlessUpdateBuffData(int UserID, int data, int value);
        void SendKitoff(string msg);
        GSPacketIn SendLabyrinthUpdataInfo(int ID, UserLabyrinthInfo laby);
        void SendLanternriddlesOpen(int playerID, bool isOpen);
        void SendLeagueNotice(int id, int restCount, int maxCount, byte type);
        void SendLittleGameActived();
        void SendLoginFailed(string msg);
        void SendLoginSuccess();
        GSPacketIn SendLuckStarOpen(int ID);
        GSPacketIn SendLuckStoneEnable(int ID);
        GSPacketIn SendMagicStonePoint(PlayerInfo player);
        GSPacketIn SendMailResponse(int playerID, eMailRespose type);
        GSPacketIn SendMarryApplyReply(GamePlayer player, int UserID, string UserName, bool result, bool isApplicant, int ID);
        GSPacketIn SendMarryInfo(GamePlayer player, MarryInfo info);
        GSPacketIn SendMarryInfoRefresh(MarryInfo info, int ID, bool isExist);
        GSPacketIn SendMarryProp(GamePlayer player, MarryProp info);
        GSPacketIn SendMarryRoomInfo(GamePlayer player, MarryRoom room);
        GSPacketIn SendMarryRoomInfoToPlayer(GamePlayer player, bool state, MarryRoomInfo info);
        GSPacketIn SendMarryRoomLogin(GamePlayer player, bool result);
        GSPacketIn SendMessage(eMessageType type, string message);
        GSPacketIn SendMissionEnergy(UsersExtraInfo extra);
        GSPacketIn SendNecklaceStrength(PlayerInfo player);
        GSPacketIn SendNetWork(GamePlayer player, long delay);
        GSPacketIn sendOneOnOneTalk(int receiverID, bool isAutoReply, string SenderNickName, string msg, int playerid);
        GSPacketIn SendOpenBoguAdventure();
        void SendOpenDDPlay(PlayerInfo player);
        GSPacketIn SendOpenGrowthPackageOpen(int ID);
        GSPacketIn SendOpenHoleComplete(GamePlayer player, int type, bool result);
        void SendOpenLightRoad();
        void SendOpenNoviceActive(int channel, int activeId, int condition, int awardGot, DateTime startTime, DateTime endTime);
        void SendOpenOrCloseChristmas(int lastPacks, bool isOpen);
        GSPacketIn SendOpenTimeBox(int condtion, bool isSuccess);
        GSPacketIn SendOpenVIP(PlayerInfo Player);
        void SendOpenWorldBoss(int pX, int pY);
        GSPacketIn SendPayFields(GamePlayer Player, List<int> fieldIds);
        void SendPetGuildOptionChange();
        GSPacketIn SendPetInfo(PlayerInfo info, UsersPetinfo[] pets);
        void SendPingTime(GamePlayer player);
        void SendPlayerCardEquip(PlayerInfo player, List<UsersCardInfo> cards);
        void SendPlayerCardInfo(CardInventory bag, int[] updatedSlots);
        GSPacketIn SendPlayerCardReset(PlayerInfo player, List<int> points);
        GSPacketIn SendPlayerCardSlot(PlayerInfo player, UsersCardInfo card);
        void SendPlayerCardSlot(PlayerInfo info, List<UsersCardInfo> cardslots);
        GSPacketIn SendPlayerCardSoul(PlayerInfo player, bool isSoul, int soul);
        GSPacketIn SendPlayerDivorceApply(GamePlayer player, bool result, bool isProposer);
        GSPacketIn SendPlayerDrill(int ID, Dictionary<int, UserDrillInfo> drills);
        GSPacketIn SendPlayerEnterMarryRoom(GamePlayer player);
        GSPacketIn SendPlayerFigSpiritinit(int ID, List<UserGemStone> gems);
        GSPacketIn SendPlayerFigSpiritUp(int ID, UserGemStone gem, bool isUp, bool isMaxLevel, bool isFall, int num, int dir);
        GSPacketIn SendPlayerLeaveMarryRoom(GamePlayer player);
        GSPacketIn SendPlayerMarryApply(GamePlayer player, int userID, string userName, string loveProclamation, int ID);
        GSPacketIn SendPlayerMarryStatus(GamePlayer player, int userID, bool isMarried);
        GSPacketIn SendPlayerRefreshTotem(PlayerInfo player);
        void SendPyramidOpenClose(PyramidConfigInfo info);
        void SendQQtips(int UserID, QQtipsMessagesInfo QQTips);
        GSPacketIn SendRefineryPreview(GamePlayer player, int templateid, bool isbind, SqlDataProvider.Data.ItemInfo item);
        GSPacketIn SendRefreshPet(GamePlayer player, UsersPetinfo[] pets, SqlDataProvider.Data.ItemInfo[] items, bool refreshBtn);
        GSPacketIn SendRoomCreate(BaseRoom room);
        GSPacketIn SendRoomLoginResult(bool result);
        GSPacketIn SendRoomPairUpCancel(BaseRoom room);
        GSPacketIn SendRoomPairUpStart(BaseRoom room);
        GSPacketIn SendRoomPlayerAdd(GamePlayer player);
        GSPacketIn SendRoomPlayerChangedTeam(GamePlayer player);
        GSPacketIn SendRoomPlayerRemove(GamePlayer player);
        GSPacketIn SendRoomType(GamePlayer player, BaseRoom game);
        GSPacketIn SendRoomUpdatePlacesStates(int[] states);
        GSPacketIn SendRoomUpdatePlayerStates(byte[] states);
        GSPacketIn SendRuneOpenPackage(GamePlayer player, int rand);
        GSPacketIn SendSceneAddPlayer(GamePlayer player);
        GSPacketIn SendSceneRemovePlayer(GamePlayer player);
        GSPacketIn SendSeeding(PlayerInfo Player, UserFieldInfo field);
        GSPacketIn SendSevenDoubleOpenClose(int ID, bool result);
        GSPacketIn SendSingleRoomCreate(BaseRoom room);
        void SendSuperWinnerOpen(int playerID, bool isOpen);
        void SendTCP(GSPacketIn packet);
        GSPacketIn SendtoGather(PlayerInfo Player, UserFieldInfo field);
        void SendTreasureHunting(PyramidConfigInfo info);
        GSPacketIn SendTrusteeshipStart(int ID);
        GSPacketIn SendUpdateAchievementInfo(List<AchievementProcessInfo> process);
        GSPacketIn SendUpdateAchievements(GamePlayer player, BaseAchievement[] infos);
        GSPacketIn SendUpdateAllData(PlayerInfo player);
        GSPacketIn SendUpdateBuffer(GamePlayer player, BufferInfo[] infos);
        GSPacketIn SendUpdateConsotiaBuffer(GamePlayer player, Dictionary<int, BufferInfo> bufflist);
        GSPacketIn SendUpdateGoodsCount(PlayerInfo player, ShopItemInfo[] BagList, ShopItemInfo[] ConsoList);
        void SendUpdateInventorySlot(PlayerInventory bag, int[] updatedSlots);
        GSPacketIn SendUpdateOneKeyFinish(PlayerInfo player);
        GSPacketIn SendUpdatePlayerProperty(PlayerInfo info, PlayerProperty prop);
        void SendUpdatePrivateInfo(PlayerInfo info);
        GSPacketIn SendUpdatePublicPlayer(PlayerInfo info, UserMatchInfo matchInfo);
        GSPacketIn SendUpdateQuests(GamePlayer player, byte[] states, BaseQuest[] quests);
        GSPacketIn SendUpdateRoomList(List<BaseRoom> room);
        GSPacketIn SendUpdateUpCount(PlayerInfo player);
        GSPacketIn SendUpdateUserPet(PetInventory bag, int[] slots);
        GSPacketIn SendUserEquip(PlayerInfo info, List<SqlDataProvider.Data.ItemInfo> items, List<UserGemStone> UserGemStone, List<SqlDataProvider.Data.ItemInfo> beadItems, List<SqlDataProvider.Data.ItemInfo> magicStoneItems);
        GSPacketIn SendUserRanks(List<UserRankInfo> rankList);
        GSPacketIn SendUserRanks(int Id, List<UserRankInfo> ranks);
        void SendWaitingRoom(bool result);
        void SendWeaklessGuildProgress(PlayerInfo player);
    }
}

